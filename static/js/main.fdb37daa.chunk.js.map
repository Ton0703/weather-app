{"version":3,"sources":["api/fetchWeather.js","components/Header.jsx","components/WeatherInfo.jsx","components/Forecast.jsx","components/Loading.jsx","components/Info.jsx","App.js","serviceWorker.js","index.js"],"names":["API_KEY","FetchWeather","location","a","axios","get","params","key","data","weekday","Header","set","loading","setLoading","date","Date","useState","input","setInput","visible","setVisible","handleSubmit","trim","className","onClick","style","transform","height","value","onChange","e","target","onKeyPress","placeholder","getMonth","getDate","getDay","WeatherInfo","cloud","cond_code","cond_txt","fl","hum","pcpn","pres","tmp","wind_dir","wind_sc","details","icon","title","src","alt","map","item","index","Forecast","list","cond_code_d","tmp_max","tmp_min","Loading","useEffect","setTimeout","display","Info","href","App","setLocation","weather","setWeather","storage","localStorage","getItem","fetchData","useCallback","fetchWeather","HeWeather6","basic","setItem","now","daily_forecast","Boolean","window","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.fdb37daa.chunk.js","sourcesContent":["import axios from \"axios\";\r\n\r\nconst URL = \"https://free-api.heweather.net/s6/weather\";\r\nconst API_KEY = \"e974a4265f5b48ab9b760dfab6614854\";\r\n\r\nexport default async function FetchWeather(location) {\r\n  const { data } = await axios.get(URL, {\r\n    params: {\r\n      location: location,\r\n      key: API_KEY,\r\n    },\r\n  });\r\n  return data;\r\n}\r\n","import React, { useState } from \"react\";\r\nimport { FaExchangeAlt } from \"react-icons/fa\";\r\nimport { IoMdRefresh } from \"react-icons/io\";\r\n\r\nconst weekday = [\r\n  \"星期日\",\r\n  \"星期一\",\r\n  \"星期二\",\r\n  \"星期三\",\r\n  \"星期四\",\r\n  \"星期五\",\r\n  \"星期六\",\r\n];\r\n\r\nfunction Header({ location, set, loading, setLoading }) {\r\n  const date = new Date();\r\n  const [input, setInput] = useState(\"\");\r\n  const [visible, setVisible] = useState(false);\r\n\r\n  const handleClick = () => {\r\n    setVisible(!visible);\r\n  };\r\n  const handleSubmit = () => {\r\n    if (input.trim() === \"\") return;\r\n    set(input);\r\n    setLoading(true);\r\n    setInput(\"\");\r\n    setVisible(false);\r\n  };\r\n  const handlePress = (e) => {\r\n    if (e.key === \"Enter\") {\r\n      handleSubmit();\r\n    }\r\n  };\r\n  return (\r\n    <div className=\"header\">\r\n      <div className=\"header-location\">\r\n        <div className=\"location\">\r\n          {location}\r\n          <span>{location ? \"市\" : \"\"}</span>\r\n        </div>\r\n        {loading ? (\r\n          <div className=\"fresh\">\r\n            <IoMdRefresh />\r\n          </div>\r\n        ) : (\r\n          <div\r\n            className=\"change-btn\"\r\n            onClick={handleClick}\r\n            style={{ transform: visible ? \"rotate(180deg)\" : \"rotate(0deg\" }}\r\n          >\r\n            <FaExchangeAlt />\r\n          </div>\r\n        )}\r\n      </div>\r\n      <div\r\n        className=\"location-input\"\r\n        style={{ height: visible ? \"35px\" : \"0px\" }}\r\n      >\r\n        <input\r\n          value={input}\r\n          onChange={(e) => setInput(e.target.value)}\r\n          onKeyPress={handlePress}\r\n          placeholder=\"请输入地址(中文、拼音)\"\r\n        />\r\n        <button onClick={handleSubmit}>确定！</button>\r\n      </div>\r\n      <div className=\"header-time\">\r\n        <div className=\"month-day\">\r\n          <div className=\"month\">{date.getMonth() + 1}月</div>\r\n          <div className=\"day\">{date.getDate()}日</div>\r\n        </div>\r\n        <div className=\"week\">{weekday[date.getDay()]}</div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Header;\r\n","import React, { useState } from \"react\";\r\nimport {\r\n  AiOutlineDoubleLeft,\r\n  AiOutlineDashboard,\r\n  AiOutlineCloud,\r\n} from \"react-icons/ai\";\r\nimport { FiCloudRain } from \"react-icons/fi\";\r\nimport {\r\n  WiThermometer,\r\n  WiStrongWind,\r\n  WiThermometerInternal,\r\n} from \"react-icons/wi\";\r\n\r\nfunction WeatherInfo({ data }) {\r\n  const [visible, setVisible] = useState(false);\r\n  const {\r\n    cloud,\r\n    cond_code,\r\n    cond_txt,\r\n    fl,\r\n    hum,\r\n    pcpn,\r\n    pres,\r\n    tmp,\r\n    wind_dir,\r\n    wind_sc,\r\n  } = data;\r\n  const details = [\r\n    {\r\n      icon: <WiThermometer />,\r\n      title: \"体表温度\",\r\n      value: fl + \"度\",\r\n    },\r\n    {\r\n      icon: <WiStrongWind />,\r\n      title: wind_dir,\r\n      value: wind_sc + \"级\",\r\n    },\r\n    {\r\n      icon: <WiThermometerInternal />,\r\n      title: \"湿度\",\r\n      value: hum + \"度\",\r\n    },\r\n    {\r\n      icon: <FiCloudRain />,\r\n      title: \"降水量\",\r\n      value: pcpn + \"mm\",\r\n    },\r\n    {\r\n      icon: <AiOutlineDashboard />,\r\n      title: \"气压\",\r\n      value: pres + \"Pa\",\r\n    },\r\n    {\r\n      icon: <AiOutlineCloud />,\r\n      title: \"云量\",\r\n      value: cloud + \"%\",\r\n    },\r\n  ];\r\n  const toggleVisible = () => {\r\n    setVisible(!visible);\r\n  };\r\n\r\n  return (\r\n    <div\r\n      className=\"weather-info\"\r\n      style={{ height: visible ? \"380px\" : \"242.5px\" }}\r\n    >\r\n      <div className=\"cond\">\r\n        <div className=\"cond-logo\">\r\n          <img src={`/cond-icon-heweather/${cond_code}.png`} alt=\"\" />\r\n        </div>\r\n        <div className=\"cond-txt\">{cond_txt}</div>\r\n      </div>\r\n      <div className=\"tmp\">\r\n        <div className=\"now-tmp\">\r\n          {tmp}\r\n          <sup>&deg;C</sup>\r\n        </div>\r\n      </div>\r\n      <div\r\n        className=\"more\"\r\n        style={{ transform: visible ? \"rotate(90deg)\" : \"rotate(-90deg\" }}\r\n      >\r\n        <AiOutlineDoubleLeft onClick={toggleVisible} />\r\n      </div>\r\n      <div className=\"details\">\r\n        {details.map((item, index) => (\r\n          <div key={index} className=\"detail\">\r\n            <div className=\"icon\">{item.icon}</div>\r\n            <div className=\"txt\">\r\n              <div className=\"detail-title\">{item.title}</div>\r\n              <div className=\"detail-value\">{item.value}</div>\r\n            </div>\r\n          </div>\r\n        ))}\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default WeatherInfo;\r\n","import React from \"react\";\r\n\r\nlet day = new Date().getDay() + 2;\r\nconst weekday = [\"周日\", \"周一\", \"周二\", \"周三\", \"周四\", \"周五\", \"周六\"];\r\nconst date = [\"今天\", \"明天\", weekday[day]];\r\n\r\nfunction Forecast({ data }) {\r\n  const list = data.map(({ cond_code_d, tmp_max, tmp_min }) => ({\r\n    cond_code_d,\r\n    tmp_max,\r\n    tmp_min,\r\n  }));\r\n  return (\r\n    <div className=\"forecast\">\r\n      <div className=\"forecast-list\">\r\n        {list.map((item, index) => (\r\n          <div className=\"daily\" key={index}>\r\n            <div className=\"date\">{date[index]}</div>\r\n            <div className=\"daily-icon\">\r\n              <img\r\n                src={`/cond-icon-heweather/${item.cond_code_d}.png`}\r\n                alt=\"\"\r\n              />\r\n            </div>\r\n            <div className=\"temp\">\r\n              <span className=\"min\">{item.tmp_min}</span>/\r\n              <span className=\"max\">{item.tmp_max}</span>\r\n            </div>\r\n          </div>\r\n        ))}\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Forecast;\r\n","import React, { useState, useEffect } from \"react\";\r\n\r\nfunction Loading() {\r\n  const [visible, setVisible] = useState(\"none\");\r\n  useEffect(() => {\r\n    setTimeout(() => {\r\n      setVisible(\"block\");\r\n    }, 6000);\r\n  }, []);\r\n  return (\r\n    <div className=\"loading\">\r\n      <span>Loading</span>\r\n      <div className=\"tip\" style={{ display: `${visible}` }}>\r\n        如果长时间未响应请检查网络或者输入是否有误！\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Loading;\r\n","import React from \"react\";\r\n\r\nfunction Info() {\r\n  return (\r\n    <div className=\"info\">\r\n      <div className=\"github\">\r\n        <a href=\"https://github.com/Ton0703/weather-app\">Github</a>\r\n      </div>\r\n      <div className=\"Api\">\r\n        <a href=\"https://dev.heweather.com/docs/api/weather\">API</a>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\nexport default Info;\r\n","import React, { useCallback, useState, useEffect } from \"react\";\r\nimport fetchWeather from \"./api/fetchWeather\";\r\nimport \"./App.scss\";\r\nimport Header from \"./components/Header\";\r\nimport WeatherInfo from \"./components/WeatherInfo\";\r\nimport Forecast from \"./components/Forecast\";\r\nimport Loading from \"./components/Loading\";\r\nimport Info from \"./components/Info\";\r\n\r\nfunction App() {\r\n  const [location, setLocation] = useState(\"\");\r\n  const [weather, setWeather] = useState(\"\");\r\n  const [loading, setLoading] = useState(false);\r\n\r\n  useEffect(() => {\r\n    const storage = localStorage.getItem(\"WeatherLocation\");\r\n    if (storage) {\r\n      setLocation(storage);\r\n    } else {\r\n      setLocation(\"北京\");\r\n    }\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    setTimeout(() => fetchData(), 100);\r\n  }, [location]);\r\n\r\n  const fetchData = useCallback(async () => {\r\n    const data = await fetchWeather(location);\r\n    setWeather({ ...data.HeWeather6[0] });\r\n    setLoading(false);\r\n    if (data.HeWeather6[0].basic)\r\n      localStorage.setItem(\r\n        \"WeatherLocation\",\r\n        data.HeWeather6[0].basic.location\r\n      );\r\n  }, [location]);\r\n\r\n  return (\r\n    <div className=\"App\">\r\n      <Header\r\n        location={weather.basic ? weather.basic.location : location}\r\n        set={setLocation}\r\n        loading={loading}\r\n        setLoading={setLoading}\r\n      />\r\n      {weather.now ? <WeatherInfo data={weather.now} /> : <Loading />}\r\n      {weather.daily_forecast && <Forecast data={weather.daily_forecast} />}\r\n      <Info />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}